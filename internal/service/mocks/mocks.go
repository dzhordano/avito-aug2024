// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	domain "github.com/dzhordano/avito-bootcamp2024/internal/domain"
	dtos "github.com/dzhordano/avito-bootcamp2024/internal/dtos"
	gomock "github.com/golang/mock/gomock"
)

// MockHouses is a mock of Houses interface.
type MockHouses struct {
	ctrl     *gomock.Controller
	recorder *MockHousesMockRecorder
}

// MockHousesMockRecorder is the mock recorder for MockHouses.
type MockHousesMockRecorder struct {
	mock *MockHouses
}

// NewMockHouses creates a new mock instance.
func NewMockHouses(ctrl *gomock.Controller) *MockHouses {
	mock := &MockHouses{ctrl: ctrl}
	mock.recorder = &MockHousesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHouses) EXPECT() *MockHousesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHouses) Create(ctx context.Context, house dtos.HouseCreateInput) (domain.House, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, house)
	ret0, _ := ret[0].(domain.House)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockHousesMockRecorder) Create(ctx, house interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHouses)(nil).Create), ctx, house)
}

// GetById mocks base method.
func (m *MockHouses) GetById(ctx context.Context, id int) ([]domain.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].([]domain.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockHousesMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockHouses)(nil).GetById), ctx, id)
}

// Subscribe mocks base method.
func (m *MockHouses) Subscribe(ctx context.Context, houseId int, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, houseId, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockHousesMockRecorder) Subscribe(ctx, houseId, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockHouses)(nil).Subscribe), ctx, houseId, email)
}

// MockFlats is a mock of Flats interface.
type MockFlats struct {
	ctrl     *gomock.Controller
	recorder *MockFlatsMockRecorder
}

// MockFlatsMockRecorder is the mock recorder for MockFlats.
type MockFlatsMockRecorder struct {
	mock *MockFlats
}

// NewMockFlats creates a new mock instance.
func NewMockFlats(ctrl *gomock.Controller) *MockFlats {
	mock := &MockFlats{ctrl: ctrl}
	mock.recorder = &MockFlatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlats) EXPECT() *MockFlatsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFlats) Create(ctx context.Context, flat dtos.FlatCreateInput) (domain.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, flat)
	ret0, _ := ret[0].(domain.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFlatsMockRecorder) Create(ctx, flat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFlats)(nil).Create), ctx, flat)
}

// Update mocks base method.
func (m *MockFlats) Update(ctx context.Context, flatId int, status domain.Status) (domain.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, flatId, status)
	ret0, _ := ret[0].(domain.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFlatsMockRecorder) Update(ctx, flatId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFlats)(nil).Update), ctx, flatId, status)
}

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// DummyLogin mocks base method.
func (m *MockUsers) DummyLogin(userType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DummyLogin", userType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DummyLogin indicates an expected call of DummyLogin.
func (mr *MockUsersMockRecorder) DummyLogin(userType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DummyLogin", reflect.TypeOf((*MockUsers)(nil).DummyLogin), userType)
}

// Login mocks base method.
func (m *MockUsers) Login(ctx context.Context, user dtos.UserLoginInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUsersMockRecorder) Login(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUsers)(nil).Login), ctx, user)
}

// Register mocks base method.
func (m *MockUsers) Register(ctx context.Context, user dtos.UserRegisterInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUsersMockRecorder) Register(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUsers)(nil).Register), ctx, user)
}
